## Set the API endpoint used to create the Deployment resource.
apiVersion: apps/v1
## Define the type of the resource.
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  annotations:
  labels:
    app: travel-planner
  name: travel-planner
  namespace: scnfs-demo
## Define the desired configuration for the Deployment resource.
spec:
  ## Set the number of replicas.
  ## This will create a ReplicaSet that will manage 3 pods of the Airport Finder application.
  replicas: 1
  ## Identify the pods managed by this Deployment using the following selectors.
  ## In this case, all pods with the label `airport-finder`.
  selector:
    matchLabels:
      app: travel-planner
  ## Set the RollingOut strategy for the Deployment.
  ## For example, roll out only 25% of the new pods at a time.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  ## Set the configuration for the pods.
  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `airport-finder`
    metadata:
      labels:
        app: travel-planner
    ## Define the desired state of the pod configuration.
    spec:
      containers:
        ## Set the image to be executed inside the container and image pull policy
        ## In this case, run the `airport-finder` application in version 0.0.1-SNAPSHOT and
        ## only pull the image if it's not available on the current host.
      - image: verdoso/travel-planner-ui:latest
        #imagePullPolicy: IfNotPresent
        name: travel-planner
        ## Expose the port the container is listening on.
        ## For example, exposing the application port 7777 via TCP.
        ports:
        - containerPort: 7777
          protocol: TCP
        ## Define the rules for the liveness probes.
        ## For example, verify the application on the main route `/`,
        ## on application port 9999. If the application is not responsive, then the pod will be restarted automatically. 
#        livenessProbe:
#           httpGet:
#             host: localhost
#             path: /manage/health
#             port: 7777
#           failureThreshold: 1 
#           periodSeconds: 20
#           initialDelaySeconds: 20
        ## Define the rules for the readiness probes.
        ## For example, verify the application on the main route `/`,
        ## on application port 9999. If the application is responsive, then traffic will be sent to this pod.
#        readinessProbe:
#           httpGet:
#             host: localhost
#             path: /health
#             port: 7777
#           failureThreshold: 1 
#           periodSeconds: 20
#           initialDelaySeconds: 20
        ## The secrets where the authentication data to be used in the different apps reside
        env: 
          -
            name: AIRPORT_FINDER_ADDRESS
            value: http://airport-finder.scnfs-demo:9999
        ## Set the resource requests and limits for an application.
#        resources:
        ## The resource requests guarantees that the desired amount 
        ## CPU and memory is allocated for a pod. In this example, 
        ## the pod will be allocated with 64 Mebibytes and 250 miliCPUs.
#          requests:
#            memory: "64Mi"
#            cpu: "250m"
        ## The resource limits ensure that the application is not consuming 
        ## more than the specified CPU and memory values. In this example, 
        ## the pod will not surpass 128 Mebibytes and 500 miliCPUs.
#          limits:
#            memory: "128Mi"
#            cpu: "500m"